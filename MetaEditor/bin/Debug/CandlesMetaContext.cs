//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CandlesMetaNamespace
{
    using CacheEXTREME2.WProxyGlobal;
    using CacheEXTREME2.WMetaGlobal;
    using InterSystems.Globals;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    
    
    public class CandlesContext : CacheEXTREME2.WProxyGlobal.CacheEXTREMEcontext
    {
        
        public ProxyManager<CandleProxy, CandleProxyKey> CandleManager;
        
        public CandlesContext(InterSystems.Globals.Connection conn , string global = "Candles") : 
                base(conn, global, "CandlesMeta")
        {
            base.structsManagers.Add(new StructManager<BarTime>(base.globalMeta.GetStructDefinition("BarTime"), base.structsManagers, base.globalRef.Conn));
            this.CandleManager = new ProxyManager<CandleProxy, CandleProxyKey>(base.entitiesMeta[typeof(CandleProxy).Name], base.globalRef, base.structsManagers);
        }
    }
    
    public class CandleProxy
    {
        
        // keyname: Exchange(String), min: 3, max: 50, def: 
        public String Exchange;
        
        // keyname: Symbol(String), min: 1, max: 20, def: 
        public String Symbol;
        
        // keyname: BarSize(Int32), min: 0, max: 600000, def: 5
        public Int32? BarSize;
        
        // keyname: Time(BarTime)
        public BarTime Time;
        
        // valname: OpenPrice(Double), min: 0, max: 999999, def: 0
        public Double OpenPrice;
        
        // valname: LowPrice(Double), min: 0, max: 999999, def: 0
        public Double LowPrice;
        
        // valname: HighPrice(Double), min: 0, max: 999999, def: 0
        public Double HighPrice;
        
        // valname: ClosePrice(Double), min: 0, max: 999999, def: 0
        public Double ClosePrice;
        
        // valname: SellAmount(Double), min: 0, max: 999999999, def: 0
        public Double SellAmount;
        
        // valname: BuyAmount(String), min: 0, max: 999999999, def: 
        public String BuyAmount;
        
        public CandleProxy(String Exchange, String Symbol, Int32? BarSize, BarTime Time, Double OpenPrice, Double LowPrice, Double HighPrice, Double ClosePrice, Double SellAmount, String BuyAmount)
        {
            this.Exchange = Exchange;
            this.Symbol = Symbol;
            this.BarSize = BarSize;
            this.Time = Time;
            this.OpenPrice = OpenPrice;
            this.LowPrice = LowPrice;
            this.HighPrice = HighPrice;
            this.ClosePrice = ClosePrice;
            this.SellAmount = SellAmount;
            this.BuyAmount = BuyAmount;
        }
        
        public CandleProxy()
        {
            this.Exchange = "";
            this.Symbol = "";
            this.BarSize = 5;
            this.Time = new BarTime();
            this.OpenPrice = 0D;
            this.LowPrice = 0D;
            this.HighPrice = 0D;
            this.ClosePrice = 0D;
            this.SellAmount = 0D;
            this.BuyAmount = "";
        }
        
        public virtual bool CandleValidator(CandleProxy entity)
        {
            return true;
        }
    }
    
    public class CandleProxyKey
    {
        
        // name: Exchange(String), min: 3, max: 50, def: 
        public String Exchange;
        
        // name: Symbol(String), min: 1, max: 20, def: 
        public String Symbol;
        
        // name: BarSize(Int32), min: 0, max: 600000, def: 5
        public Int32? BarSize;
        
        // name: Time(BarTime)
        public BarTime Time;
        
        public CandleProxyKey(String Exchange, String Symbol, Int32? BarSize, BarTime Time)
        {
            this.Exchange = Exchange;
            this.Symbol = Symbol;
            this.BarSize = BarSize;
            this.Time = Time;
        }
        
        public CandleProxyKey()
        {
            this.Exchange = "";
            this.Symbol = "";
            this.BarSize = 5;
            this.Time = new BarTime();
        }
    }
    
    public class BarTime
    {
        
        // name: Year(Int32), min: 0, max: 9999, def: 0
        public Int32? Year;
        
        // name: Month(Int32), min: 1, max: 12, def: 0
        public Int32? Month;
        
        // name: Day(Int32), min: 1, max: 31, def: 0
        public Int32? Day;
        
        // name: Hour(Int32), min: 0, max: 25, def: 0
        public Int32? Hour;
        
        // name: Minute(Int32), min: 0, max: 60, def: 0
        public Int32? Minute;
        
        // name: Second(Int32), min: 0, max: 60, def: 0
        public Int32? Second;
        
        public BarTime()
        {
            this.Year = 0;
            this.Month = 0;
            this.Day = 0;
            this.Hour = 0;
            this.Minute = 0;
            this.Second = 0;
        }
        
        public BarTime(Int32? Year, Int32? Month, Int32? Day, Int32? Hour, Int32? Minute, Int32? Second)
        {
            this.Year = Year;
            this.Month = Month;
            this.Day = Day;
            this.Hour = Hour;
            this.Minute = Minute;
            this.Second = Second;
        }
    }
}
